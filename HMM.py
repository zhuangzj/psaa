import numpy as np
from hmmlearn import hmm
from sklearn.preprocessing import LabelEncoder

def hidden_markov(variables, length_list):
    
    start_probability = np.array([0.333, 0.333, 0.334])
    
    transition_probability = np.array([
      [0.333, 0.333, 0.334],
      [0.333, 0.333, 0.334],
      [0.333, 0.333, 0.334]
    ])
    
    emission_probability = np.array([
      [0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00874, 0.00874],
      [0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00874, 0.00874],
      [0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00847, 0.00874, 0.00874]
    ])
    
    model = hmm.MultinomialHMM(n_components=3, n_iter = 20, verbose = True)
    model.startprob_ = start_probability
    model.transmat_ = transition_probability
    model.emissionprob_ = emission_probability
    
    X = convert(variables)
    model = model.fit(np.atleast_2d(X).T, length_list)
    
    print(model)
    print(model.startprob_)
    print(model.transmat_)
    print(model.emissionprob_)
    
def convert(variables):
    #list of list
#   X = np.concatenate(np.array(variables))
    arr = []
    for l in variables:
        arr.append(np.array(l))
    X = np.concatenate(np.array(arr))
    X_trans = LabelEncoder().fit_transform(X)
    return X_trans

    